# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLO Continuous Integration (CI) GitHub Actions tests

name: Ultralytics CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 0 * * *" # runs at 00:00 UTC every day
  workflow_dispatch:
    inputs:
      benchmarks:
        description: "Run Benchmarks"
        default: false
        type: boolean
      tests:
        description: "Run Tests"
        default: false
        type: boolean
      raspberrypi:
        description: "Run Raspberry Pi"
        default: false
        type: boolean

jobs:
  Benchmarks:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.benchmarks == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14]
        python-version: ["3.11"]
        model: [yolov8n]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip" # caching pip dependencies
      - name: Install requirements
        shell: bash # for Windows compatibility
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e ".[export]" --extra-index-url https://download.pytorch.org/whl/cpu
      - name: Check environment
        run: |
          yolo checks
          pip list
      - name: Benchmark ClassificationModel
        shell: bash
        run: python -m ultralytics.cfg.__init__ benchmark model='path with spaces/${{ matrix.model }}-cls.pt' imgsz=160 verbose=0.166
      - name: Benchmark YOLOWorld DetectionModel
        shell: bash
        run: python -m ultralytics.cfg.__init__ benchmark model='path with spaces/yolov8s-worldv2.pt' imgsz=160 verbose=0.318
      - name: Benchmark SegmentationModel
        shell: bash
        run: python -m ultralytics.cfg.__init__ benchmark model='path with spaces/${{ matrix.model }}-seg.pt' imgsz=160 verbose=0.279
      - name: Benchmark PoseModel
        shell: bash
        run: python -m ultralytics.cfg.__init__ benchmark model='path with spaces/${{ matrix.model }}-pose.pt' imgsz=160 verbose=0.183
      - name: Benchmark OBBModel
        shell: bash
        run: python -m ultralytics.cfg.__init__ benchmark model='path with spaces/${{ matrix.model }}-obb.pt' imgsz=160 verbose=0.472
      - name: Benchmark YOLOv10Model
        shell: bash
        run: python -m ultralytics.cfg.__init__ benchmark model='path with spaces/yolov10n.pt' imgsz=160 verbose=0.178
      - name: Benchmark Summary
        run: |
          cat benchmarks.log
          echo "$(cat benchmarks.log)" >> $GITHUB_STEP_SUMMARY

  Tests:
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.tests == 'true'
    timeout-minutes: 360
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-14, windows-latest]
        python-version: ["3.11"]
        torch: [latest]
        include:
          - os: ubuntu-latest
            python-version: "3.8" # torch 1.8.0 requires python >=3.6, <=3.8
            torch: "1.8.0" # min torch version CI https://pypi.org/project/torchvision/
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip" # caching pip dependencies
      - name: Install requirements
        shell: bash # for Windows compatibility
        run: |
          # CoreML must be installed before export due to protobuf error from AutoInstall
          python -m pip install --upgrade pip wheel
          slow=""
          torch=""
          if [ "${{ matrix.torch }}" == "1.8.0" ]; then
              torch="torch==1.8.0 torchvision==0.9.0"
          fi
          if [[ "${{ github.event_name }}" =~ ^(schedule|workflow_dispatch)$ ]]; then
              slow="pycocotools mlflow ray[tune]"
          fi
          pip install -e ".[export]" $torch $slow --extra-index-url https://download.pytorch.org/whl/cpu
      - name: Check environment
        run: |
          yolo checks
          pip list
      - name: Pytest tests
        shell: bash # for Windows compatibility
        run: |
          slow=""
          if [[ "${{ github.event_name }}" =~ ^(schedule|workflow_dispatch)$ ]]; then
              slow="--slow"
          fi
          pytest $slow tests/

  RaspberryPi:
    # if: github.repository == 'lakshanthad/ultralytics' && (github.event_name == 'schedule' || github.event.inputs.raspberrypi == 'true')
    timeout-minutes: 120
    runs-on: raspberry-pi
    steps:
      - uses: actions/checkout@v4
      - name: Activate Virtual Environment
        run: |
          python3.11 -m venv env
          source env/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV
      - name: Install requirements
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e ".[export]" pytest mlflow pycocotools "ray[tune]"
      - name: Check environment
        run: |
          yolo checks
          pip list
      - name: Pytest tests
        run: pytest --slow tests/
      - name: Benchmark ClassificationModel
        run: python -m ultralytics.cfg.__init__ benchmark model='yolov8n-cls.pt' imgsz=160 verbose=0.166
      - name: Benchmark YOLOWorld DetectionModel
        run: python -m ultralytics.cfg.__init__ benchmark model='yolov8s-worldv2.pt' imgsz=160 verbose=0.318
      - name: Benchmark SegmentationModel
        run: python -m ultralytics.cfg.__init__ benchmark model='yolov8n-seg.pt' imgsz=160 verbose=0.267
      - name: Benchmark PoseModel
        run: python -m ultralytics.cfg.__init__ benchmark model='yolov8n-pose.pt' imgsz=160 verbose=0.179
      - name: Benchmark OBBModel
        run: python -m ultralytics.cfg.__init__ benchmark model='yolov8n-obb.pt' imgsz=160 verbose=0.472
      - name: Benchmark Summary
        run: |
          cat benchmarks.log
          echo "$(cat benchmarks.log)" >> $GITHUB_STEP_SUMMARY
      # The below is fixed in: https://github.com/ultralytics/ultralytics/pull/15987
      # - name: Reboot # run a reboot command in the background to free resources for next run and not crash main thread
      #   run: sudo bash -c "sleep 10; reboot" &